{"trial_id": "00", "hyperparameters": {"space": [{"class_name": "Int", "config": {"name": "conv1_filters", "default": null, "conditions": [], "min_value": 32, "max_value": 128, "step": 32, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "conv1_kernel", "default": 3, "conditions": [], "values": [3, 5, 7], "ordered": true}}, {"class_name": "Int", "config": {"name": "conv2_filters", "default": null, "conditions": [], "min_value": 64, "max_value": 256, "step": 64, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "conv2_kernel", "default": 3, "conditions": [], "values": [3, 5], "ordered": true}}, {"class_name": "Int", "config": {"name": "conv3_filters", "default": null, "conditions": [], "min_value": 32, "max_value": 128, "step": 32, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "conv3_kernel", "default": 3, "conditions": [], "values": [3, 5], "ordered": true}}, {"class_name": "Int", "config": {"name": "dense1_units", "default": null, "conditions": [], "min_value": 128, "max_value": 512, "step": 128, "sampling": "linear"}}, {"class_name": "Float", "config": {"name": "l2", "default": 0.0001, "conditions": [], "min_value": 0.0001, "max_value": 0.01, "step": null, "sampling": "log"}}, {"class_name": "Float", "config": {"name": "dropout1", "default": 0.3, "conditions": [], "min_value": 0.3, "max_value": 0.7, "step": 0.1, "sampling": "linear"}}, {"class_name": "Int", "config": {"name": "dense2_units", "default": null, "conditions": [], "min_value": 64, "max_value": 256, "step": 64, "sampling": "linear"}}, {"class_name": "Float", "config": {"name": "dropout2", "default": 0.3, "conditions": [], "min_value": 0.3, "max_value": 0.7, "step": 0.1, "sampling": "linear"}}, {"class_name": "Float", "config": {"name": "lr", "default": 0.0001, "conditions": [], "min_value": 0.0001, "max_value": 0.001, "step": null, "sampling": "log"}}], "values": {"conv1_filters": 128, "conv1_kernel": 3, "conv2_filters": 64, "conv2_kernel": 5, "conv3_filters": 96, "conv3_kernel": 3, "dense1_units": 256, "l2": 0.001270765007942736, "dropout1": 0.4, "dense2_units": 192, "dropout2": 0.6000000000000001, "lr": 0.00013310688812771636}}, "metrics": {"metrics": {}}, "score": null, "best_step": 0, "status": "FAILED", "message": "Traceback (most recent call last):\n  File \"c:\\Users\\PC\\Desktop\\TCC_2025\\.venv\\Lib\\site-packages\\keras_tuner\\src\\engine\\base_tuner.py\", line 274, in _try_run_and_update_trial\n    self._run_and_update_trial(trial, *fit_args, **fit_kwargs)\n  File \"c:\\Users\\PC\\Desktop\\TCC_2025\\.venv\\Lib\\site-packages\\keras_tuner\\src\\engine\\base_tuner.py\", line 239, in _run_and_update_trial\n    results = self.run_trial(trial, *fit_args, **fit_kwargs)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\PC\\Desktop\\TCC_2025\\.venv\\Lib\\site-packages\\keras_tuner\\src\\engine\\tuner.py\", line 314, in run_trial\n    obj_value = self._build_and_fit_model(trial, *args, **copied_kwargs)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\PC\\Desktop\\TCC_2025\\.venv\\Lib\\site-packages\\keras_tuner\\src\\engine\\tuner.py\", line 233, in _build_and_fit_model\n    results = self.hypermodel.fit(hp, model, *args, **kwargs)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\PC\\Desktop\\TCC_2025\\.venv\\Lib\\site-packages\\keras_tuner\\src\\engine\\hypermodel.py\", line 149, in fit\n    return model.fit(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\PC\\Desktop\\TCC_2025\\.venv\\Lib\\site-packages\\keras\\src\\utils\\traceback_utils.py\", line 122, in error_handler\n    raise e.with_traceback(filtered_tb) from None\n  File \"c:\\Users\\PC\\Desktop\\TCC_2025\\.venv\\Lib\\site-packages\\keras\\src\\layers\\input_spec.py\", line 227, in assert_input_compatibility\n    raise ValueError(\nValueError: Exception encountered when calling Sequential.call().\n\n\u001b[1mInput 0 of layer \"conv1d\" is incompatible with the layer: expected axis -1 of input shape to have value 1, but received input with shape (None, 500, 12)\u001b[0m\n\nArguments received by Sequential.call():\n  \u2022 inputs=tf.Tensor(shape=(None, 500, 12, 1), dtype=float32)\n  \u2022 training=True\n  \u2022 mask=None\n"}